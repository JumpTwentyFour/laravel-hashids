<?php

namespace Bvtterfly\LaravelHashids;

use Bvtterfly\LaravelHashids\Exceptions\InvalidOption;
use Hashids\Hashids;
use Illuminate\Database\Eloquent\Model;

trait HasHashId
{
    protected HashIdOptions $hashIdOptions;

    abstract public function getHashIdOptions(): HashIdOptions;

    protected static function bootHasHashId(): void
    {
        static::created(function (Model $model) {
            $model->generateHashIdOnCreatedEvent();
            $model->saveQuietly();
        });
        static::creating(function (Model $model) {
            $model->generateHashIdOnCreatingEvent();
        });
    }

    protected function generateHashIdOnCreatingEvent(): void
    {
        $this->hashIdOptions = $this->getHashIdOptions()->forModel($this);

        if ($this->hashIdOptions->autoGeneratedField) {
            return;
        }

        $this->addHashId();
    }

    protected function generateHashIdOnCreatedEvent(): void
    {
        $this->hashIdOptions = $this->getHashIdOptions()->forModel($this);

        if (! $this->hashIdOptions->autoGeneratedField) {
            return;
        }

        $this->addHashId();
    }

    protected function addHashId(): void
    {
        $this->ensureValidHashIdOptions();

        $hashId = $this->generateHashId();

        $hashIdField = $this->hashIdOptions->hashIdField;

        $this->$hashIdField = $hashId;
    }

    protected function generateHashId(): string
    {
        $value = $this->getHashIdFromValue();

        if ($this->hashIdOptions->type == 'int') {
            return $this->getGenerator()->encode($value);
        }

        return $this->getGenerator()->encodeHex($value);
    }

    protected function getHashIdFromValue()
    {
        return $this->{$this->getHashIdFromField()};
    }

    protected function getHashIdFromField(): string
    {
        return $this->hashIdOptions->generateHashIdFrom ?? $this->getKeyName();
    }

    protected function getGenerator(): Hashids
    {
        return HashIdBuilder::build($this->hashIdOptions);
    }

    protected function ensureValidHashIdOptions(): void
    {
        if (! strlen($this->hashIdOptions->hashIdField)) {
            throw InvalidOption::missingHashIdField();
        }

        if ($this->hashIdOptions->minHashLength < 0) {
            throw InvalidOption::invalidMinLength();
        }
    }
}
